// DISCLAIMER: tutte le etichette che ho "assegnato qua"
// avranno valori differenti nel .asm finale, ho lasciato
// temporaneamente questi solo per chiarezza :)

//push constant val
    @{val}
    D = A
    @SP
    M = M + 1
    A = M - 1
    M = D

//push local/argument/THIS/THAT n
    @{n}
    D = A
    @LCL/ARG/THIS/THAT
    A = M + D
    D = M
    @SP
    M = M + 1
    A = M - 1
    M = D

//push pointer/temp n
    @3/5            // pointer = 3, temp = 5
    D = A
    @{n}
    A = D + A
    D = M
    @SP
    M = M + 1
    A = M - 1
    M = D

//push static n
    @{current_file_name}.{n}
    D = M
    @SP
    M = M + 1
    A = M - 1
    M = D

// pop local/argument n
    @{n}
    D = A
    @ARG/LCL
    D = M + D
    @13
    M = D
    @SP
    AM = M - 1
    D = M
    @13
    A = M
    M = D

// pop this/that n
    @THIS/THAT
    D = M
    @{n}
    D = D + A
    @13
    M = D
    @SP
    AM = M - 1
    D = M
    @13
    A = M
    M = D
    
// pop pointer/temp n
    @3/5            // pointer = 3, temp = 5
    D = A
    @{n}
    D = D + A
    @13
    M = D
    @SP
    AM = M - 1
    D = M
    @13
    A = M
    M = D

// pop static n
    @{current_file_name}.{n}
    D = A
    @13
    M = D
    @SP
    AM = M - 1  
    D = M
    @13
    A = M
    M = D

// add
    @SP
    AM = M - 1
    D = M
    A = A - 1
    M = D + M

// sub
    @SP
    AM = M - 1      
    D = M
    A = A - 1
    M = M - D

// neg
    @SP
    A = M - 1
    M = -M

// and
    @SP
    AM = M - 1  
    D = M
    A = A - 1
    M = M&D

// or
    @SP
    AM = M - 1      
    D = M
    A = A - 1
    M = M|D

// not
    @SP
    A = M - 1
    M = !M

// eq/lt/gt
    @{newlabel}
    D = A
    @R13
    M = D
    @DEFAULT_EQ/LT/GT
    0;JMP
    ({newlabel})

// default EQ/LT/GT
    (DEFAULT_EQ/LT/GT)
    @SP
    AM = M - 1
    D = M
    @SP
    A = M - 1
    D = M - D
    @DEFAULT_EQ/LT/GT_IF
    D;JGT
    @SP
    A = M - 1
    M = 0
    @DEFAULT_EQ/LT/GT_IF2
    0;JMP
    (DEFAULT_EQ/LT/GT_IF)
    @SP
    A = M - 1
    M = -1
    (DEFAULT_EQ/LT/GT_IF2)
    @R13
    A = M
    0;JMP

// label nomelabel
    ({nomelabel})

// goto label
    @{label}
    0;JMP

// if-goto label
    @SP
    AM = M - 1
    D = M
    @{label}
    D;JGT
    D;JLT

//function fname nlocal
    ({fname})
    for(int i = 0;i<nlocal;i++){
        @SP
        M = M + 1
        A = M - 1
        M = 0
    }

// call fname narg
    @{label1}
    D = A
    @R13
    M = D
    @{narg}
    D = A
    @R14
    M = D
    @{return-address}
    D = A
    @R15
    M = D
    @DEFAULT_CALL
    0;JMP
    ({label1})
    @{fname}
    0;JMP
    ({return-address})

// default call
    (DEFAULT_CALL_IMPLEMENTATION)
    @R15
    D = M
    @SP
    A = M
    M = D           // push return-address(R15)
    @SP
    M = M + 1
    @LCL
    D = M
    @SP
    A = M
    M = D           // push LCL
    @SP
    M = M + 1
    @ARG
    D = M
    @SP
    A = M
    M = D           // push ARG
    @SP
    M = M + 1
    @THIS
    D = M
    @SP
    A = M
    M = D           // push THIS
    @SP
    M = M + 1
    @THAT
    D = M
    @SP
    A = M
    M = D           // push THAT
    @SP
    M = M + 1
    @SP
    D = M
    @5
    D = D - A
    @R14
    D = D - M
    @ARG
    M = D           // ARG = SP - narg(R14) - 5
    @SP
    D = M
    @LCL
    M = D           // LCL = SP
    @R13
    A = M
    0;JMP           // JMP label1(R13)

// return
    @DEFAULT_RETURN
    0;JMP               // non e' necessario salvare un altra etichetta perche'
                        // il return ci fa saltare direttamente all'indirizzo giusto
                        // alla fine

// default return
    (DEFAULT_RETURN)
    @5
    D = A
    @LCL
    A = M - D
    D = M
    @R13
    M = D       // ram[13] = return-address
    @SP
    A = M - 1
    D = M
    @ARG
    A = M
    M = D       // ram[0] = last pushed value
    @ARG
    D = M
    @SP
    M = D + 1   // SP = ARG + 1
    @LCL
    D = M
    @FRAME
    AM = D - 1
    D = M       // FRAME = LCL - 1
    @THAT
    M = D       // ram[THAT] = old that
    @FRAME
    AM = M - 1
    D = M
    @THIS
    M = D       // ram[THIS] = old this
    @FRAME
    AM = M - 1
    D = M
    @ARG
    M = D       // ram[ARG] = old arg
    @FRAME
    AM = M - 1
    D = M
    @LCL
    M = D       // ram[LCL] = old lcl
    @R13
    A = M
    0;JMP       // jump to return-address